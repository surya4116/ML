import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# --- Step 1: Create synthetic car dataset ---
np.random.seed(42)
n_samples = 500

# Features
year = np.random.randint(2000, 2021, n_samples)
mileage = np.random.randint(5000, 200000, n_samples)
engine_size = np.round(np.random.uniform(1.0, 5.0, n_samples), 1)
brand_quality = np.random.choice([1, 2, 3], n_samples, p=[0.3, 0.5, 0.2])  # 1=low, 2=medium, 3=high

# Target variable (price), a function of features + some noise
price = (
    20000
    - (2025 - year) * 800    # newer cars cost more
    - mileage * 0.05         # more mileage lowers price
    + engine_size * 1500     # bigger engines cost more
    + brand_quality * 3000   # brand quality affects price
    + np.random.normal(0, 2000, n_samples)  # noise
)

# Create DataFrame
df = pd.DataFrame({
    'year': year,
    'mileage': mileage,
    'engine_size': engine_size,
    'brand_quality': brand_quality,
    'price': price
})

# --- Step 2: Prepare features and target ---
X = df.drop('price', axis=1)
y = df['price']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Step 3: Train Linear Regression model ---
model = LinearRegression()
model.fit(X_train, y_train)

# --- Step 4: Predict and evaluate ---
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# --- Step 5: Plot actual vs predicted prices ---
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Car Price Prediction: Actual vs Predicted")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')  # identity line
plt.tight_layout()
plt.show()
