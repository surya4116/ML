import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# --- Step 1: Create synthetic dataset ---
np.random.seed(42)
n_samples = 1000

# Features:
# Age, Income (in 1000s), Credit Score, Loan Amount (in 1000s), Has Default History (0 or 1)
age = np.random.randint(18, 70, n_samples)
income = np.random.randint(20, 150, n_samples)  # thousands
credit_score = np.random.randint(300, 850, n_samples)
loan_amount = np.random.randint(1, 50, n_samples)  # thousands
default_history = np.random.choice([0, 1], n_samples, p=[0.8, 0.2])

# Target: Loan Approved (1) or Not (0)
# Simple rule for approval (for demonstration):
loan_approved = (
    (income > 40).astype(int) +
    (credit_score > 600).astype(int) +
    (default_history == 0).astype(int) +
    (loan_amount < 20).astype(int)
)
loan_approved = (loan_approved >= 3).astype(int)

# Build DataFrame
df = pd.DataFrame({
    'age': age,
    'income': income,
    'credit_score': credit_score,
    'loan_amount': loan_amount,
    'default_history': default_history,
    'loan_approved': loan_approved
})

# --- Step 2: Prepare data ---
X = df.drop('loan_approved', axis=1)
y = df['loan_approved']

# Split data into training and testing sets (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# --- Step 3: Train Gaussian Naive Bayes model ---
gnb = GaussianNB()
gnb.fit(X_train, y_train)

# --- Step 4: Predict and evaluate ---
y_pred = gnb.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Loan Denied', 'Loan Approved'])
disp.plot(cmap=plt.cm.Blues)
plt.title("Naive Bayes Confusion Matrix - Bank Loan Prediction")
plt.show()
