import numpy as np

# Activation Function: Sigmoid and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Training Data for OR Gate
X = np.array([[0,0],[0,1],[1,0],[1,1]])  # Inputs
y = np.array([[0],[1],[1],[1]])          # Output

# Initialize parameters
input_layer_size = 2
hidden_layer_size = 2
output_layer_size = 1
epochs = 10000
learning_rate = 0.1

# Weight initialization (random small numbers)
np.random.seed(1)
weights_input_hidden = np.random.uniform(size=(input_layer_size, hidden_layer_size))
weights_hidden_output = np.random.uniform(size=(hidden_layer_size, output_layer_size))

# Training with Backpropagation
for epoch in range(epochs):
    # --- Forward Propagation ---
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)
    
    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)
    
    # --- Backward Propagation ---
    error = y - final_output
    d_output = error * sigmoid_derivative(final_output)
    
    error_hidden = d_output.dot(weights_hidden_output.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)
    
    # Update weights
    weights_hidden_output += hidden_output.T.dot(d_output) * learning_rate
    weights_input_hidden += X.T.dot(d_hidden) * learning_rate

# Final trained outputs
print("Final predictions after training:")
print(np.round(final_output))
