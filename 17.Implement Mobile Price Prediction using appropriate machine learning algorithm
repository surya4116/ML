import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# --- Step 1: Create synthetic mobile dataset ---
np.random.seed(42)
n_samples = 600

# Features: ram (GB), storage (GB), camera (MP), battery (mAh), brand_quality (1-3)
ram = np.random.choice([2, 3, 4, 6, 8, 12], n_samples)
storage = np.random.choice([32, 64, 128, 256, 512], n_samples)
camera = np.random.uniform(8, 108, n_samples).round(1)
battery = np.random.randint(2000, 6000, n_samples)
brand_quality = np.random.choice([1, 2, 3], n_samples, p=[0.3, 0.5, 0.2])  # 1=low, 3=high

# Price target (in USD), a simple function + noise
price = (
    ram * 40 +
    storage * 1.5 +
    camera * 20 +
    battery * 0.3 +
    brand_quality * 150 +
    np.random.normal(0, 50, n_samples)
)

# Create DataFrame
df = pd.DataFrame({
    'ram': ram,
    'storage': storage,
    'camera': camera,
    'battery': battery,
    'brand_quality': brand_quality,
    'price': price
})

# --- Step 2: Prepare data ---
X = df.drop('price', axis=1)
y = df['price']

# Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Step 3: Train Random Forest Regressor ---
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# --- Step 4: Predict and evaluate ---
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# --- Step 5: Plot actual vs predicted prices ---
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Mobile Price Prediction: Actual vs Predicted")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.tight_layout()
plt.show()
