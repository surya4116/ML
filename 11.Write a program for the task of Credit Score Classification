import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import seaborn as sns

# === Step 1: Generate synthetic credit score data ===
# Features: age, income, loan_amount, credit_history (0 or 1), employment_years
# Target: credit_score_class (0 = bad, 1 = good)

np.random.seed(42)
n_samples = 1000

age = np.random.randint(18, 70, n_samples)
income = np.random.randint(20000, 120000, n_samples)
loan_amount = np.random.randint(1000, 50000, n_samples)
credit_history = np.random.choice([0, 1], n_samples, p=[0.3, 0.7])
employment_years = np.random.randint(0, 30, n_samples)

# Simple rule to generate labels for demonstration (not real scoring)
credit_score_class = (
    (income > 50000).astype(int) +
    (credit_history == 1).astype(int) +
    (employment_years > 2).astype(int) +
    (loan_amount < 20000).astype(int)
)
credit_score_class = (credit_score_class >= 3).astype(int)  # 1 if good, else 0

# Create DataFrame
df = pd.DataFrame({
    'age': age,
    'income': income,
    'loan_amount': loan_amount,
    'credit_history': credit_history,
    'employment_years': employment_years,
    'credit_score_class': credit_score_class
})

# === Step 2: Prepare data ===
X = df.drop('credit_score_class', axis=1)
y = df['credit_score_class']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Feature scaling (important for some models)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# === Step 3: Train a Logistic Regression model ===
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# === Step 4: Predict and evaluate ===
y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Bad Credit', 'Good Credit'])
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix: Credit Score Classification")
plt.show()
